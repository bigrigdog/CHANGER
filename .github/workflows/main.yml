name: Full Automation CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  auto-setup-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      # Add a step to check and fix formatting
      - name: Check and Fix Formatting
        run: |
          # Install Black if not already installed
          pip install black
          
          # Check for formatting issues
          black --check --diff .

          # If issues found, fix them
          if [ $? -ne 0 ]; then
            black .
            git add .
            git diff-index --quiet HEAD || git commit -m "Fix formatting issues" && git push origin main
          else
            echo "No formatting issues found."
          fi

      - name: Auto Setup .gitmodules and Submodules
        run: |
          if [ ! -f ".gitmodules" ]; then
            echo "Creating .gitmodules because it does not exist"
            echo "[submodule \"externals/repo\"]" >> .gitmodules
            echo "path = externals/repo" >> .gitmodules
            echo "url = https://github.com/bigrigdog/CHANGER.git" >> .gitmodules
            git submodule add https://github.com/bigrigdog/CHANGER.git externals/repo
          fi
          git submodule update --init --recursive

      - name: Create Tests Directory if Missing
        run: |
          if [ ! -d "tests" ]; then
            echo "Creating tests directory because it does not exist"
            mkdir tests
            echo "def test_placeholder(): pass" > tests/test_placeholder.py
          fi

      - name: Setup Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8 autopep8

      - name: Lint with Flake8
        run: |
          flake8 . --count --exit-zero --statistics --output-file flake8_report.txt
          cat flake8_report.txt || echo "No linting issues found."

      - name: Run Pytest and Coverage
        run: |
          pytest -vv --cov=./

      - name: Generate Documentation Automatically
        run: |
          # Assuming Sphinx is used, setup Sphinx if not already
          [ ! -d "docs" ] && mkdir docs
          [ ! -f "docs/conf.py" ] && sphinx-quickstart -q --sep -p "Project Name" -a "Author Name" -v "0.1" --ext-autodoc --ext-viewcode --makefile -o docs
          sphinx-build -b html docs/source docs/build

      - name: Slack Notification on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
